// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod2 - Use 'RecordedMethod2Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod2()
        {

            // Launch '%USERPROFILE%\Documents\flextrafik\Fynbus\Flexcel_Fynbus\Kode\Flexcel\View\bin\Debug\View.exe'
            ApplicationUnderTest uIFlexSorteringWindow = ApplicationUnderTest.Launch(this.RecordedMethod2Params.UIFlexSorteringWindowExePath, this.RecordedMethod2Params.UIFlexSorteringWindowAlternateExePath);
        }
        
        #region Properties
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public UIFlexSorteringWindow UIFlexSorteringWindow
        {
            get
            {
                if ((this.mUIFlexSorteringWindow == null))
                {
                    this.mUIFlexSorteringWindow = new UIFlexSorteringWindow();
                }
                return this.mUIFlexSorteringWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private UIFlexSorteringWindow mUIFlexSorteringWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\flextrafik\Fynbus\Flexcel_Fynbus\Kode\Flexcel\View\bin\Debug\View.exe'
        /// </summary>
        public string UIFlexSorteringWindowExePath = "C:\\Users\\krizzmp\\Documents\\flextrafik\\Fynbus\\Flexcel_Fynbus\\Kode\\Flexcel\\View\\bin" +
            "\\Debug\\View.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\flextrafik\Fynbus\Flexcel_Fynbus\Kode\Flexcel\View\bin\Debug\View.exe'
        /// </summary>
        public string UIFlexSorteringWindowAlternateExePath = "%USERPROFILE%\\Documents\\flextrafik\\Fynbus\\Flexcel_Fynbus\\Kode\\Flexcel\\View\\bin\\De" +
            "bug\\View.exe";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFlexSorteringWindow : WpfWindow
    {
        
        public UIFlexSorteringWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Flex-Sortering";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Flex-Sortering");
            #endregion
        }
        
        #region Properties
        public WpfButton UIVælgfilButton
        {
            get
            {
                if ((this.mUIVælgfilButton == null))
                {
                    this.mUIVælgfilButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIVælgfilButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnMasterDataFilePathSelect";
                    this.mUIVælgfilButton.WindowTitles.Add("Flex-Sortering");
                    #endregion
                }
                return this.mUIVælgfilButton;
            }
        }
        
        public WpfButton UIVælgfilButton1
        {
            get
            {
                if ((this.mUIVælgfilButton1 == null))
                {
                    this.mUIVælgfilButton1 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIVælgfilButton1.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnRouteNumberOfferXlFilePathSelect";
                    this.mUIVælgfilButton1.WindowTitles.Add("Flex-Sortering");
                    #endregion
                }
                return this.mUIVælgfilButton1;
            }
        }
        
        public WpfButton UIImporterButton
        {
            get
            {
                if ((this.mUIImporterButton == null))
                {
                    this.mUIImporterButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIImporterButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnImport";
                    this.mUIImporterButton.WindowTitles.Add("Flex-Sortering");
                    #endregion
                }
                return this.mUIImporterButton;
            }
        }
        
        public WpfButton UIStartUdvælgelseButton
        {
            get
            {
                if ((this.mUIStartUdvælgelseButton == null))
                {
                    this.mUIStartUdvælgelseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIStartUdvælgelseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnStartSelection";
                    this.mUIStartUdvælgelseButton.WindowTitles.Add("Flex-Sortering");
                    #endregion
                }
                return this.mUIStartUdvælgelseButton;
            }
        }
        
        public UIListViewTable UIListViewTable
        {
            get
            {
                if ((this.mUIListViewTable == null))
                {
                    this.mUIListViewTable = new UIListViewTable(this);
                }
                return this.mUIListViewTable;
            }
        }
        
        public WpfEdit UITxtBoxFilePathMasterEdit
        {
            get
            {
                if ((this.mUITxtBoxFilePathMasterEdit == null))
                {
                    this.mUITxtBoxFilePathMasterEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITxtBoxFilePathMasterEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "txtBoxFilePathMasterData";
                    this.mUITxtBoxFilePathMasterEdit.WindowTitles.Add("Flex-Sortering");
                    #endregion
                }
                return this.mUITxtBoxFilePathMasterEdit;
            }
        }
        
        public WpfEdit UITxtBoxFilePathRouteNEdit
        {
            get
            {
                if ((this.mUITxtBoxFilePathRouteNEdit == null))
                {
                    this.mUITxtBoxFilePathRouteNEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITxtBoxFilePathRouteNEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "txtBoxFilePathRouteNumberOffer";
                    this.mUITxtBoxFilePathRouteNEdit.WindowTitles.Add("Flex-Sortering");
                    #endregion
                }
                return this.mUITxtBoxFilePathRouteNEdit;
            }
        }
        
        public WpfEdit UITxtBoxFilePathRouteNEdit1
        {
            get
            {
                if ((this.mUITxtBoxFilePathRouteNEdit1 == null))
                {
                    this.mUITxtBoxFilePathRouteNEdit1 = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITxtBoxFilePathRouteNEdit1.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TxtBoxFilePathRouteNumbers";
                    this.mUITxtBoxFilePathRouteNEdit1.WindowTitles.Add("Flex-Sortering");
                    #endregion
                }
                return this.mUITxtBoxFilePathRouteNEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIVælgfilButton;
        
        private WpfButton mUIVælgfilButton1;
        
        private WpfButton mUIImporterButton;
        
        private WpfButton mUIStartUdvælgelseButton;
        
        private UIListViewTable mUIListViewTable;
        
        private WpfEdit mUITxtBoxFilePathMasterEdit;
        
        private WpfEdit mUITxtBoxFilePathRouteNEdit;
        
        private WpfEdit mUITxtBoxFilePathRouteNEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIListViewTable : WpfTable
    {
        
        public UIListViewTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "listView";
            this.WindowTitles.Add("Flex-Sortering");
            #endregion
        }
        
        #region Properties
        public UIItemDataItem UIItemDataItem
        {
            get
            {
                if ((this.mUIItemDataItem == null))
                {
                    this.mUIItemDataItem = new UIItemDataItem(this);
                }
                return this.mUIItemDataItem;
            }
        }
        
        public UIItemHeader UIItemHeader
        {
            get
            {
                if ((this.mUIItemHeader == null))
                {
                    this.mUIItemHeader = new UIItemHeader(this);
                }
                return this.mUIItemHeader;
            }
        }
        #endregion
        
        #region Fields
        private UIItemDataItem mUIItemDataItem;
        
        private UIItemHeader mUIItemHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemDataItem : WpfControl
    {
        
        public UIItemDataItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.WindowTitles.Add("Flex-Sortering");
            #endregion
        }
        
        #region Properties
        public WpfCell Type3Cell
        {
            get
            {
                if ((this.mType3Cell == null))
                {
                    this.mType3Cell = new WpfCell(this);
                    #region Search Criteria
                    this.mType3Cell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Vedståede V. Type 3";
                    this.mType3Cell.WindowTitles.Add("Flex-Sortering");
                    #endregion
                }
                return this.mType3Cell;
            }
        }
        
        public WpfCell Type2Cell
        {
            get
            {
                if ((this.mType2Cell == null))
                {
                    this.mType2Cell = new WpfCell(this);
                    #region Search Criteria
                    this.mType2Cell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Vedståede V. Type 2";
                    this.mType2Cell.WindowTitles.Add("Flex-Sortering");
                    #endregion
                }
                return this.mType2Cell;
            }
        }
        
        public WpfCell Type6Cell
        {
            get
            {
                if ((this.mType6Cell == null))
                {
                    this.mType6Cell = new WpfCell(this);
                    #region Search Criteria
                    this.mType6Cell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Vedståede V. Type 6";
                    this.mType6Cell.WindowTitles.Add("Flex-Sortering");
                    #endregion
                }
                return this.mType6Cell;
            }
        }
        
        public WpfCell Type7Cell
        {
            get
            {
                if ((this.mType7Cell == null))
                {
                    this.mType7Cell = new WpfCell(this);
                    #region Search Criteria
                    this.mType7Cell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Vedståede V. Type 7";
                    this.mType7Cell.WindowTitles.Add("Flex-Sortering");
                    #endregion
                }
                return this.mType7Cell;
            }
        }
        
        public WpfCell Type5Cell
        {
            get
            {
                if ((this.mType5Cell == null))
                {
                    this.mType5Cell = new WpfCell(this);
                    #region Search Criteria
                    this.mType5Cell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Vedståede V. Type 5";
                    this.mType5Cell.WindowTitles.Add("Flex-Sortering");
                    #endregion
                }
                return this.mType5Cell;
            }
        }
        #endregion
        
        #region Fields
        private WpfCell mType3Cell;
        
        private WpfCell mType2Cell;
        
        private WpfCell mType6Cell;
        
        private WpfCell mType7Cell;
        
        private WpfCell mType5Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemHeader : WpfControl
    {
        
        public UIItemHeader(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "Header";
            this.WindowTitles.Add("Flex-Sortering");
            #endregion
        }
        
        #region Properties
        public UIVedståedeVType3HeaderItem UIVedståedeVType3HeaderItem
        {
            get
            {
                if ((this.mUIVedståedeVType3HeaderItem == null))
                {
                    this.mUIVedståedeVType3HeaderItem = new UIVedståedeVType3HeaderItem(this);
                }
                return this.mUIVedståedeVType3HeaderItem;
            }
        }
        
        public UIVedståedeVType6HeaderItem UIVedståedeVType6HeaderItem
        {
            get
            {
                if ((this.mUIVedståedeVType6HeaderItem == null))
                {
                    this.mUIVedståedeVType6HeaderItem = new UIVedståedeVType6HeaderItem(this);
                }
                return this.mUIVedståedeVType6HeaderItem;
            }
        }
        
        public UIVedståedeVType2HeaderItem UIVedståedeVType2HeaderItem
        {
            get
            {
                if ((this.mUIVedståedeVType2HeaderItem == null))
                {
                    this.mUIVedståedeVType2HeaderItem = new UIVedståedeVType2HeaderItem(this);
                }
                return this.mUIVedståedeVType2HeaderItem;
            }
        }
        #endregion
        
        #region Fields
        private UIVedståedeVType3HeaderItem mUIVedståedeVType3HeaderItem;
        
        private UIVedståedeVType6HeaderItem mUIVedståedeVType6HeaderItem;
        
        private UIVedståedeVType2HeaderItem mUIVedståedeVType2HeaderItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIVedståedeVType3HeaderItem : WpfControl
    {
        
        public UIVedståedeVType3HeaderItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "HeaderItem";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Vedståede V. Type 3";
            this.WindowTitles.Add("Flex-Sortering");
            #endregion
        }
        
        #region Properties
        public WpfControl UIPART_HeaderGripperIndicator
        {
            get
            {
                if ((this.mUIPART_HeaderGripperIndicator == null))
                {
                    this.mUIPART_HeaderGripperIndicator = new WpfControl(this);
                    #region Search Criteria
                    this.mUIPART_HeaderGripperIndicator.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mUIPART_HeaderGripperIndicator.SearchProperties[WpfControl.PropertyNames.AutomationId] = "PART_HeaderGripper";
                    this.mUIPART_HeaderGripperIndicator.WindowTitles.Add("Flex-Sortering");
                    #endregion
                }
                return this.mUIPART_HeaderGripperIndicator;
            }
        }
        #endregion
        
        #region Fields
        private WpfControl mUIPART_HeaderGripperIndicator;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIVedståedeVType6HeaderItem : WpfControl
    {
        
        public UIVedståedeVType6HeaderItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "HeaderItem";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Vedståede V. Type 6";
            this.WindowTitles.Add("Flex-Sortering");
            #endregion
        }
        
        #region Properties
        public WpfText UIVedståedeVType6Text
        {
            get
            {
                if ((this.mUIVedståedeVType6Text == null))
                {
                    this.mUIVedståedeVType6Text = new WpfText(this);
                    #region Search Criteria
                    this.mUIVedståedeVType6Text.SearchProperties[WpfText.PropertyNames.Name] = "Vedståede V. Type 6";
                    this.mUIVedståedeVType6Text.WindowTitles.Add("Flex-Sortering");
                    #endregion
                }
                return this.mUIVedståedeVType6Text;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIVedståedeVType6Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIVedståedeVType2HeaderItem : WpfControl
    {
        
        public UIVedståedeVType2HeaderItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "HeaderItem";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Vedståede V. Type 2";
            this.WindowTitles.Add("Flex-Sortering");
            #endregion
        }
        
        #region Properties
        public WpfControl UIPART_HeaderGripperIndicator
        {
            get
            {
                if ((this.mUIPART_HeaderGripperIndicator == null))
                {
                    this.mUIPART_HeaderGripperIndicator = new WpfControl(this);
                    #region Search Criteria
                    this.mUIPART_HeaderGripperIndicator.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mUIPART_HeaderGripperIndicator.SearchProperties[WpfControl.PropertyNames.AutomationId] = "PART_HeaderGripper";
                    this.mUIPART_HeaderGripperIndicator.WindowTitles.Add("Flex-Sortering");
                    #endregion
                }
                return this.mUIPART_HeaderGripperIndicator;
            }
        }
        #endregion
        
        #region Fields
        private WpfControl mUIPART_HeaderGripperIndicator;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        
        public UIOpenWindow2 UIOpenWindow2
        {
            get
            {
                if ((this.mUIOpenWindow2 == null))
                {
                    this.mUIOpenWindow2 = new UIOpenWindow2(this);
                }
                return this.mUIOpenWindow2;
            }
        }
        
        public UIAddressCUserskrizzmpWindow UIAddressCUserskrizzmpWindow
        {
            get
            {
                if ((this.mUIAddressCUserskrizzmpWindow == null))
                {
                    this.mUIAddressCUserskrizzmpWindow = new UIAddressCUserskrizzmpWindow(this);
                }
                return this.mUIAddressCUserskrizzmpWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIOpenWindow1 mUIOpenWindow1;
        
        private UIOpenWindow2 mUIOpenWindow2;
        
        private UIAddressCUserskrizzmpWindow mUIAddressCUserskrizzmpWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIStamoplysninger_FakeListItem UIStamoplysninger_FakeListItem
        {
            get
            {
                if ((this.mUIStamoplysninger_FakeListItem == null))
                {
                    this.mUIStamoplysninger_FakeListItem = new UIStamoplysninger_FakeListItem(this);
                }
                return this.mUIStamoplysninger_FakeListItem;
            }
        }
        
        public UITilbud_FakeDatacsvListItem UITilbud_FakeDatacsvListItem
        {
            get
            {
                if ((this.mUITilbud_FakeDatacsvListItem == null))
                {
                    this.mUITilbud_FakeDatacsvListItem = new UITilbud_FakeDatacsvListItem(this);
                }
                return this.mUITilbud_FakeDatacsvListItem;
            }
        }
        
        public UITestmed3budtilsammerListItem UITestmed3budtilsammerListItem
        {
            get
            {
                if ((this.mUITestmed3budtilsammerListItem == null))
                {
                    this.mUITestmed3budtilsammerListItem = new UITestmed3budtilsammerListItem(this);
                }
                return this.mUITestmed3budtilsammerListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIStamoplysninger_FakeListItem mUIStamoplysninger_FakeListItem;
        
        private UITilbud_FakeDatacsvListItem mUITilbud_FakeDatacsvListItem;
        
        private UITestmed3budtilsammerListItem mUITestmed3budtilsammerListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIStamoplysninger_FakeListItem : WinListItem
    {
        
        public UIStamoplysninger_FakeListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Stamoplysninger_FakeData.csv";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITilbud_FakeDatacsvListItem : WinListItem
    {
        
        public UITilbud_FakeDatacsvListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Tilbud_FakeData.csv";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITestmed3budtilsammerListItem : WinListItem
    {
        
        public UITestmed3budtilsammerListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Test med 3 bud til samme rute";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOpenWindow2 : WinWindow
    {
        
        public UIOpenWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAddressCUserskrizzmpWindow : WinWindow
    {
        
        public UIAddressCUserskrizzmpWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIAddressCUserskrizzmpToolBar UIAddressCUserskrizzmpToolBar
        {
            get
            {
                if ((this.mUIAddressCUserskrizzmpToolBar == null))
                {
                    this.mUIAddressCUserskrizzmpToolBar = new UIAddressCUserskrizzmpToolBar(this);
                }
                return this.mUIAddressCUserskrizzmpToolBar;
            }
        }
        #endregion
        
        #region Fields
        private UIAddressCUserskrizzmpToolBar mUIAddressCUserskrizzmpToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAddressCUserskrizzmpToolBar : WinToolBar
    {
        
        public UIAddressCUserskrizzmpToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Address: C:\\Users\\krizzmp\\Documents\\flextrafik\\Fynbus\\Flexcel_Fynbus\\FakeData_Tes" +
                "ts\\Contractor vinder ikke flere bud end han har biler til og vælger billigste l¢" +
                "sning";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIFakeData_TestsSplitButton
        {
            get
            {
                if ((this.mUIFakeData_TestsSplitButton == null))
                {
                    this.mUIFakeData_TestsSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIFakeData_TestsSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "‎FakeData_Tests";
                    this.mUIFakeData_TestsSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFakeData_TestsSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIFakeData_TestsSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIStamoplysninger_FakeListItem1 UIStamoplysninger_FakeListItem
        {
            get
            {
                if ((this.mUIStamoplysninger_FakeListItem == null))
                {
                    this.mUIStamoplysninger_FakeListItem = new UIStamoplysninger_FakeListItem1(this);
                }
                return this.mUIStamoplysninger_FakeListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIStamoplysninger_FakeListItem1 mUIStamoplysninger_FakeListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIStamoplysninger_FakeListItem1 : WinListItem
    {
        
        public UIStamoplysninger_FakeListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Stamoplysninger_FakeData.csv";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
